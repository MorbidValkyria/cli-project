let chalk,fs,ncp,path,promisify,execa,Listr,projectInstall;_bce‍.x([["cliProject",()=>cliProject]]);_bce‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_bce‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_bce‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_bce‍.w("path",[["default",["path"],function(v){path=v}]]);_bce‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_bce‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_bce‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_bce‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);// ESM syntax is supported.









const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
	return copy(options.templateDirectory, options.targetDirectory, {
		clobber: false,
	});
}

async function initGit(options) {
	const result = await execa('git', ['init'], {
		cwd: options.targetDirectory,
	});

	if (result.failed) return Promise.reject(new Error('Failed to initialize git'));
	return;
}

       async function cliProject(options) {
	options = {
		...options,
		targetDirectory: options.targetDirectory || process.cwd(),
	};

	const currentFileUrl = _bce‍._.meta.url;
	const templateDir = path.resolve(
		new URL(currentFileUrl).pathname,
		'../../templates',
		options.template.toLowerCase()
	);
	options.templateDirectory = templateDir;

	try {
		await access(templateDir, fs.constants.R_OK);
	} catch(err) {
		_bce‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
		process.exit(1);
	}

	const tasks = new Listr([
		{
			title: 'Copy project files',
			task: () => copyTemplateFiles(options),	
		},
		{
			title: 'Initialize git',
			task: () => initGit(options),
			enabled: () => options.git,
		},
		{
			title: 'Install dependencies',
			task: () => 
				projectInstall({
					cwd: options.targetDirectory,
				}),
			skip: () => 
				!options.runInstall
					? 'Pass --install to automatically install dependencies'
					: undefined,
		},
	]);


	await tasks.run();

	_bce‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
	return true;
}

